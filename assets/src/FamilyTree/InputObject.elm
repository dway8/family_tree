-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module FamilyTree.InputObject exposing (..)

import FamilyTree.Interface
import FamilyTree.Object
import FamilyTree.Scalar
import FamilyTree.ScalarCodecs
import FamilyTree.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildChildParams : ChildParamsRequiredFields -> ChildParams
buildChildParams required =
    { firstName = required.firstName, sex = required.sex }


type alias ChildParamsRequiredFields =
    { firstName : String
    , sex : String
    }


{-| Type for the ChildParams input object.
-}
type alias ChildParams =
    { firstName : String
    , sex : String
    }


{-| Encode a ChildParams into a value that can be used as an argument.
-}
encodeChildParams : ChildParams -> Value
encodeChildParams input =
    Encode.maybeObject
        [ ( "firstName", Encode.string input.firstName |> Just ), ( "sex", Encode.string input.sex |> Just ) ]


buildSpouseParams : SpouseParamsRequiredFields -> SpouseParams
buildSpouseParams required =
    { firstName = required.firstName, lastName = required.lastName, sex = required.sex }


type alias SpouseParamsRequiredFields =
    { firstName : String
    , lastName : String
    , sex : String
    }


{-| Type for the SpouseParams input object.
-}
type alias SpouseParams =
    { firstName : String
    , lastName : String
    , sex : String
    }


{-| Encode a SpouseParams into a value that can be used as an argument.
-}
encodeSpouseParams : SpouseParams -> Value
encodeSpouseParams input =
    Encode.maybeObject
        [ ( "firstName", Encode.string input.firstName |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "sex", Encode.string input.sex |> Just ) ]
